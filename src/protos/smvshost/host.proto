syntax="proto3";
package smvs;

option go_package = "github.com/AdamPayzant/COMP4109Project/src/protos/host/smvshost";

service clientHost {
    rpc ReKey(Token) returns (Status); // Requests client's host to change keys
    rpc DeleteMessage(DeleteReq) returns (Status);

    // Stuff for a handshake, basically just establishes a secret between users
    rpc InitializeConvo(InitMessage) returns (Status);
    rpc ConfirmConvo(InitMessage) returns (Status);
    // Messaging calls
    rpc SendText(ClientText) returns (Status);
    rpc RecieveText(H2HText) returns (Status);

    rpc GetConversation(Username) returns (Conversation);
}

// As the name describes
message Empty {

}

// Contains the client device's auth token
message Token {
    string token = 1;
}

// A generic status response message
message Status {
    int32 status = 1;
}

message DeleteReq {
    string user = 1;
    int64 messageID = 2;
    string token = 3;
}

// Contains a secret to be shared between two hosts
message InitMessage {
    string secret = 1;
}

// The message to be sent between hosts for texts
message H2HText {
    ListofMessages message = 1;
    string user = 2;
    string secret = 3;
}

// Because the way protobuffers (don't) do lists, this is the best way to do this
message ListofMessages {
    repeated string messages = 1;
}

message ClientText {
    string targetUser = 1;
    ListofMessages message = 2;
    string token = 3; // The client device's auth token
}

message Username {
    string token = 1;
    string username = 2;
}

// This will just send the full conversation
message Conversation {
    bytes convo = 1;
}