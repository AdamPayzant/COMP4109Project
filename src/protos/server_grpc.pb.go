// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package smvsserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	Register(ctx context.Context, in *UserReg, opts ...grpc.CallOption) (*Status, error)
	GetToken(ctx context.Context, in *Username, opts ...grpc.CallOption) (*AuthKey, error)
	UpdateIP(ctx context.Context, in *IPupdate, opts ...grpc.CallOption) (*Status, error)
	UpdateKey(ctx context.Context, in *KeyUpdate, opts ...grpc.CallOption) (*Status, error)
	SearchUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UserList, error)
	GetUser(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserInfo, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Register(ctx context.Context, in *UserReg, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/smvs.Server/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetToken(ctx context.Context, in *Username, opts ...grpc.CallOption) (*AuthKey, error) {
	out := new(AuthKey)
	err := c.cc.Invoke(ctx, "/smvs.Server/getToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateIP(ctx context.Context, in *IPupdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/smvs.Server/UpdateIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) UpdateKey(ctx context.Context, in *KeyUpdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/smvs.Server/UpdateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) SearchUser(ctx context.Context, in *UserQuery, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/smvs.Server/searchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetUser(ctx context.Context, in *Username, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/smvs.Server/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	Register(context.Context, *UserReg) (*Status, error)
	GetToken(context.Context, *Username) (*AuthKey, error)
	UpdateIP(context.Context, *IPupdate) (*Status, error)
	UpdateKey(context.Context, *KeyUpdate) (*Status, error)
	SearchUser(context.Context, *UserQuery) (*UserList, error)
	GetUser(context.Context, *Username) (*UserInfo, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) Register(context.Context, *UserReg) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServerServer) GetToken(context.Context, *Username) (*AuthKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedServerServer) UpdateIP(context.Context, *IPupdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIP not implemented")
}
func (UnimplementedServerServer) UpdateKey(context.Context, *KeyUpdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKey not implemented")
}
func (UnimplementedServerServer) SearchUser(context.Context, *UserQuery) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedServerServer) GetUser(context.Context, *Username) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smvs.Server/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Register(ctx, req.(*UserReg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smvs.Server/getToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetToken(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPupdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smvs.Server/UpdateIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateIP(ctx, req.(*IPupdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_UpdateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).UpdateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smvs.Server/UpdateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).UpdateKey(ctx, req.(*KeyUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smvs.Server/searchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).SearchUser(ctx, req.(*UserQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smvs.Server/getUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetUser(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smvs.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Server_Register_Handler,
		},
		{
			MethodName: "getToken",
			Handler:    _Server_GetToken_Handler,
		},
		{
			MethodName: "UpdateIP",
			Handler:    _Server_UpdateIP_Handler,
		},
		{
			MethodName: "UpdateKey",
			Handler:    _Server_UpdateKey_Handler,
		},
		{
			MethodName: "searchUser",
			Handler:    _Server_SearchUser_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Server_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
